{"version":3,"sources":["components/Header/index.js","components/Header/Header.js","App.js","serviceWorker.js","config.js","index.js"],"names":["Header","_this$props","this","props","loginFunction","logoutFunction","isSignedIn","react_default","a","createElement","className","onClick","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isDataReady","itemEditIndex","agentEditIndex","formValueItem","formValueAgent","editItemValue","editAgentValue","agentIndex","result","item","agent","bind","assertThisInitialized","formChangeItem","formChangeAgent","pushItem","pushAgent","saveEdit","itemContentChange","agentContentChange","deleteItem","_this2","firebase","database","ref","child","once","then","snapshot","forEach","childSnapshot","key","temp","val","id","push","index","setState","googleAuth","auth","GoogleAuthProvider","addScope","signInWithPopup","authData","console","warn","catch","error","signOut","evt","target","name","value","runMutation","undefined","alert","window","location","reload","dataset","remove","path","isEmpty","data","keys","length","update","innerHTML","dataList","keyList","onChange","isEditable","map","contentEditable","suppressContentEditableWarning","onInput","data-name","_this3","config","_this$state","_this$result","Fragment","components_Header","width","telephone","address","defaultValue","renderDataColumn","title","data-id","dist_index_esm","assign","type","_ref","colSpan","placeholder","_ref2","Boolean","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","rootComponent","_react_firebase_auth_dist_index_esm","user","providerId","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ed1c3d4d.chunk.js","sourcesContent":["import Header from \"./Header\";\n\nexport default Header;\n","import React from \"react\";\nimport \"./Header.css\";\n\nclass Header extends React.Component {\n\trender() {\n\t\tconst { loginFunction, logoutFunction, isSignedIn } = this.props;\n\n\t\treturn (\n\t\t\t<div className=\"header_wrapper\">\n\t\t\t\t<div className=\"title\">SinarJaya</div>\n\t\t\t\t{!isSignedIn && (\n\t\t\t\t\t<button onClick={loginFunction} className=\"login_btn\">\n\t\t\t\t\t\tLogin\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t\t{isSignedIn && (\n\t\t\t\t\t<button onClick={logoutFunction} className=\"logout_btn\">\n\t\t\t\t\t\tLogout\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport \"firebase/database\";\nimport {\n  FirebaseDatabaseProvider,\n  // FirebaseDatabaseNode,\n  FirebaseDatabaseMutation\n} from \"@react-firebase/database\";\n\nimport Header from \"./components/Header\";\n\nconst AGENT = \"agent\";\nconst ITEM = \"item\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isDataReady: false,\n      itemEditIndex: null,\n      agentEditIndex: null\n    };\n\n    // store insert data form value\n    this.formValueItem = {};\n    this.formValueAgent = {};\n\n    // store editable content on edit state\n    this.editItemValue = {};\n    this.editAgentValue = {};\n\n    // indexing agent for performance case\n    this.agentIndex = {};\n\n    // local storage for database data\n    this.result = { item: [], agent: [] };\n\n    this.loginFunction = this.loginFunction.bind(this);\n    this.logoutFunction = this.logoutFunction.bind(this);\n    this.formChangeItem = this.formChangeItem.bind(this);\n    this.formChangeAgent = this.formChangeAgent.bind(this);\n    this.pushItem = this.pushItem.bind(this);\n    this.pushAgent = this.pushAgent.bind(this);\n    this.saveEdit = this.saveEdit.bind(this);\n    this.itemContentChange = this.itemContentChange.bind(this);\n    this.agentContentChange = this.agentContentChange.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n  }\n\n  // fetch on componentDidMount\n  componentDidMount() {\n    const { firebase } = this.props;\n\n    var item = firebase\n      .database()\n      .ref()\n      .child(\"item\");\n\n    var agent = firebase\n      .database()\n      .ref()\n      .child(\"agent\");\n\n    item.once(\"value\").then(snapshot => {\n      snapshot.forEach(childSnapshot => {\n        if (childSnapshot.key === \"default\") return;\n        var temp = snapshot.child(childSnapshot.key).val();\n        temp.id = childSnapshot.key;\n        this.result.item.push(temp);\n      });\n    });\n\n    agent.once(\"value\").then(snapshot => {\n      var index = 0;\n      snapshot.forEach(childSnapshot => {\n        if (childSnapshot.key === \"default\") return;\n        var temp = snapshot.child(childSnapshot.key).val();\n        temp.id = childSnapshot.key;\n        this.result.agent.push(temp);\n        this.agentIndex[childSnapshot.key] = index;\n        index++;\n      });\n      this.setState({\n        isDataReady: true\n      });\n    });\n  }\n\n  loginFunction() {\n    const { firebase } = this.props;\n    const googleAuth = new firebase.auth.GoogleAuthProvider();\n    googleAuth.addScope(\"https://www.googleapis.com/auth/plus.login\");\n    firebase\n      .auth()\n      .signInWithPopup(googleAuth)\n      .then(authData => {\n        console.warn(authData);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }\n\n  logoutFunction() {\n    this.props.firebase.auth().signOut();\n  }\n\n  // Listener for save item form value\n  formChangeItem(evt) {\n    this.formValueItem[evt.target.name] = evt.target.value;\n  }\n\n  // Listener for save agent form value\n  formChangeAgent(evt) {\n    this.formValueAgent[evt.target.name] = evt.target.value;\n  }\n\n  // insert Item\n  async pushItem(runMutation) {\n    if (this.formValueItem.agent === undefined) {\n      alert(\"Please fill Agent on Insert Item section\");\n    } else {\n      await runMutation(this.formValueItem);\n      window.location.reload();\n    }\n  }\n\n  // insert Agent\n  async pushAgent(runMutation) {\n    await runMutation(this.formValueAgent);\n    window.location.reload();\n  }\n\n  deleteItem(evt) {\n    this.props.firebase\n      .database()\n      .ref(\"item\")\n      .child(evt.target.dataset.id)\n      .remove();\n\n    window.location.reload();\n  }\n\n  // save data to DB when user edit\n  saveEdit(evt, path) {\n    const { firebase } = this.props;\n\n    //check empty\n    var isEmpty;\n    var data;\n    if (path === \"item\") {\n      isEmpty = Object.keys(this.editItemValue).length !== 0;\n      data = this.editItemValue;\n    } else {\n      isEmpty = Object.keys(this.editAgentValue).length !== 0;\n      data = this.editAgentValue;\n    }\n\n    if (isEmpty) {\n      var database = firebase.database().ref(path);\n\n      database\n        .child(evt.target.dataset.id)\n        .update(data)\n        .then(() => {\n          database.once(\"value\");\n        })\n        .then(snapshot => snapshot.val())\n        .catch(error => {});\n\n      window.location.reload();\n    }\n\n    this.editItemValue = {};\n    this.setState({\n      itemEditIndex: null,\n      agentEditIndex: null\n    });\n  }\n\n  itemContentChange(evt) {\n    if (evt.target.dataset.name === \"agent\") {\n      this.editItemValue[evt.target.dataset.name] = evt.target.value;\n    } else {\n      this.editItemValue[evt.target.dataset.name] = evt.target.innerHTML;\n    }\n  }\n\n  agentContentChange(evt) {\n    this.editAgentValue[evt.target.dataset.name] = evt.target.innerHTML;\n  }\n\n  renderDataColumn(dataList, keyList, onChange, isEditable) {\n    return keyList.map(key => {\n      return (\n        <td\n          key={key + dataList.id}\n          className={isEditable ? \"edit_active\" : null}\n          contentEditable={isEditable}\n          suppressContentEditableWarning={true}\n          onInput={isEditable ? onChange : null}\n          data-name={key}\n        >\n          {dataList[key]}\n        </td>\n      );\n    });\n  }\n\n  render() {\n    const { firebase, config, isSignedIn } = this.props;\n    const { isDataReady, itemEditIndex, agentEditIndex } = this.state;\n    const { item, agent } = this.result;\n    const { agentIndex } = this;\n\n    if (!isDataReady) return <div className=\"loading\">Loading...</div>;\n\n    return (\n      <React.Fragment>\n        <Header\n          loginFunction={this.loginFunction}\n          logoutFunction={this.logoutFunction}\n          isSignedIn={isSignedIn}\n        />\n        {/* ==================== Item Table ==================== */}\n        <div className=\"item_wrapper\">\n          <div className=\"item_title\">Item Detail</div>\n          <table width=\"100%\">\n            <thead>\n              <tr>\n                <td>Agent Detail</td>\n                <td>Item Name</td>\n                <td>Buy Price</td>\n                <td>Sell Price</td>\n                <td>Action</td>\n              </tr>\n            </thead>\n            <tbody>\n              {item.map((item, index) => {\n                const isEditable = itemEditIndex === index;\n                return (\n                  <tr key={item.id}>\n                    <td className={isEditable ? \"edit_active\" : null}>\n                      {!isEditable && (\n                        <table width=\"100%\" className=\"agent_detail_table\">\n                          <tbody>\n                            <tr>\n                              <td>Agent Name</td>\n                              <td>{agent[agentIndex[item.agent]].name}</td>\n                            </tr>\n                            <tr>\n                              <td>Agent Phone</td>\n                              <td>{agent[agentIndex[item.agent]].telephone}</td>\n                            </tr>\n                            <tr>\n                              <td>Agent Address</td>\n                              <td>{agent[agentIndex[item.agent]].address}</td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      )}\n                      {isEditable && (\n                        <select\n                          onChange={this.itemContentChange}\n                          data-name=\"agent\"\n                          defaultValue={item.agent}\n                        >\n                          {agent.map(agent => {\n                            return (\n                              <option key={agent.id} value={agent.id}>\n                                {agent.name}\n                              </option>\n                            );\n                          })}\n                        </select>\n                      )}\n                    </td>\n                    {this.renderDataColumn(\n                      item,\n                      [\"name\", \"price\", \"sellPrice\"],\n                      this.itemContentChange,\n                      isEditable\n                    )}\n                    <td className=\"action_column\">\n                      {!isEditable && itemEditIndex === null && (\n                        <span\n                          className=\"edit_icon\"\n                          title=\"Edit\"\n                          onClick={() => {\n                            this.setState({ itemEditIndex: index });\n                          }}\n                        />\n                      )}\n                      {isEditable && (\n                        <span\n                          data-id={item.id}\n                          className=\"save_icon\"\n                          title=\"Save\"\n                          onClick={evt => this.saveEdit(evt, ITEM)}\n                        />\n                      )}\n                      <span\n                        className=\"delete_icon\"\n                        title=\"Delete\"\n                        data-id={item.id}\n                        onClick={evt => this.deleteItem(evt, ITEM)}\n                      />\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n        {/* ==================== Agent Table ==================== */}\n        <div className=\"agent_wrapper\">\n          <div className=\"agent_title\">Agent Detail</div>\n          <table width=\"100%\">\n            <thead>\n              <tr>\n                <td>Agent Name</td>\n                <td>Agent Phone</td>\n                <td>Agent Address</td>\n                <td>Action</td>\n              </tr>\n            </thead>\n            <tbody>\n              {agent.map((agent, index) => {\n                const isEditable = agentEditIndex === index;\n                return (\n                  <tr key={agent.id}>\n                    {this.renderDataColumn(\n                      agent,\n                      [\"name\", \"telephone\", \"address\"],\n                      this.agentContentChange,\n                      isEditable\n                    )}\n                    <td className=\"action_column\">\n                      {!isEditable && agentEditIndex === null && (\n                        <span\n                          className=\"edit_icon\"\n                          title=\"Edit\"\n                          onClick={() => {\n                            this.setState({ agentEditIndex: index });\n                          }}\n                        />\n                      )}\n                      {isEditable && (\n                        <span\n                          data-id={agent.id}\n                          className=\"save_icon\"\n                          title=\"Save\"\n                          onClick={evt => this.saveEdit(evt, AGENT)}\n                        />\n                      )}\n                      <span\n                        className=\"delete_icon\"\n                        title=\"Delete\"\n                        data-id={agent.id}\n                        onClick={evt => this.deleteItem(evt, AGENT)}\n                      />\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n        {/* ==================== Form Input ==================== */}\n        <FirebaseDatabaseProvider firebase={firebase} {...config}>\n          {/* ==================== Insert Item ==================== */}\n          <FirebaseDatabaseMutation type=\"push\" path=\"item\">\n            {({ runMutation }) => {\n              return (\n                <table className=\"form_table\">\n                  <tbody>\n                    <tr>\n                      <td colSpan=\"2\" className=\"item_title\">\n                        Insert Item\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>Agent</td>\n                      <td>\n                        <select onChange={this.formChangeItem} name=\"agent\">\n                          <option defaultValue>- select from list -</option>\n                          {agent.map(agent => {\n                            return (\n                              <option key={agent.id} value={agent.id}>\n                                {agent.name}\n                              </option>\n                            );\n                          })}\n                        </select>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>Item Name</td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          name=\"name\"\n                          placeholder=\"name\"\n                          onChange={this.formChangeItem}\n                        />\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>Buy Price</td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          name=\"price\"\n                          placeholder=\"price\"\n                          onChange={this.formChangeItem}\n                        />\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>Sell Price</td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          name=\"sellPrice\"\n                          placeholder=\"sellPrice\"\n                          onChange={this.formChangeItem}\n                        />\n                      </td>\n                    </tr>\n                    <tr>\n                      <td colSpan=\"2\">\n                        <button onClick={() => this.pushItem(runMutation)}>\n                          Insert Data\n                        </button>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              );\n            }}\n          </FirebaseDatabaseMutation>\n          {/* ==================== Insert Agent ==================== */}\n          <FirebaseDatabaseMutation type=\"push\" path=\"agent\">\n            {({ runMutation }) => {\n              return (\n                <table className=\"form_table\">\n                  <tbody>\n                    <tr>\n                      <td colSpan=\"2\" className=\"agent_title\">\n                        Insert Agent\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>Agent Adress</td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          name=\"address\"\n                          placeholder=\"address\"\n                          onChange={this.formChangeAgent}\n                        />\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>Agent Name</td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          name=\"name\"\n                          placeholder=\"name\"\n                          onChange={this.formChangeAgent}\n                        />\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>Agent Phone</td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          name=\"telephone\"\n                          placeholder=\"telephone\"\n                          onChange={this.formChangeAgent}\n                        />\n                      </td>\n                    </tr>\n                    <tr>\n                      <td colSpan=\"2\">\n                        <button onClick={() => this.pushAgent(runMutation)}>\n                          Insert Data\n                        </button>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              );\n            }}\n          </FirebaseDatabaseMutation>\n        </FirebaseDatabaseProvider>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// sinarjaya\nexport const config = {\n\tapiKey: \"AIzaSyBqHd8T1PZ5vI0_z0QMz2SUjGp0zJgH2xM\",\n\tauthDomain: \"sinarjaya-eeda5.firebaseapp.com\",\n\tdatabaseURL: \"https://sinarjaya-eeda5.firebaseio.com\",\n\tprojectId: \"sinarjaya-eeda5\",\n\tstorageBucket: \"sinarjaya-eeda5.appspot.com\",\n\tmessagingSenderId: \"354759237488\",\n\tappId: \"1:354759237488:web:da0c1bd331a79be6\"\n};\n\n// test\n// export const config = {\n// \tapiKey: \"AIzaSyBCyp1LaRzUmjZ-7jWn8K1NC82pE1xH4cw\",\n// \tauthDomain: \"test-72d6c.firebaseapp.com\",\n// \tdatabaseURL: \"https://test-72d6c.firebaseio.com\",\n// \tprojectId: \"test-72d6c\",\n// \tstorageBucket: \"test-72d6c.appspot.com\",\n// \tmessagingSenderId: \"844848074841\",\n// \tappId: \"1:844848074841:web:f91ab07115b2496a\"\n// };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// firebase lib\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport {\n\tFirebaseAuthProvider,\n\tFirebaseAuthConsumer\n} from \"@react-firebase/auth\";\nimport { config } from \"./config\";\n\nconst rootComponent = (\n\t<React.Fragment>\n\t\t<FirebaseAuthProvider firebase={firebase} {...config}>\n\t\t\t<FirebaseAuthConsumer>\n\t\t\t\t{({ isSignedIn, user, providerId }) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<App isSignedIn={isSignedIn} firebase={firebase} config={config} />\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t</FirebaseAuthConsumer>\n\t\t</FirebaseAuthProvider>\n\t</React.Fragment>\n);\n\nReactDOM.render(rootComponent, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}