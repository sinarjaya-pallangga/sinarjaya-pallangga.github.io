{"version":3,"sources":["components/Header/index.js","components/Header/Header.js","App.js","serviceWorker.js","config.js","index.js"],"names":["Header","_this$props","this","props","loginFunction","logoutFunction","isSignedIn","react_default","a","createElement","className","onClick","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isDataReady","itemEditIndex","agentEditIndex","isAlowed","formValueItem","formValueAgent","editItemValue","editAgentValue","agentIndex","result","item","agent","bind","assertThisInitialized","formChangeItem","formChangeAgent","pushItem","pushAgent","saveEdit","itemContentChange","agentContentChange","deleteItem","findItemOnTable","_this2","firebase","database","ref","child","orderByChild","once","then","snapshot","forEach","childSnapshot","key","temp","val","id","push","catch","error","index","setState","googleAuth","auth","GoogleAuthProvider","addScope","signInWithPopup","authData","console","warn","window","location","reload","concat","message","signOut","evt","target","name","value","runMutation","undefined","alert","dataset","remove","path","isEmpty","data","keys","length","update","innerHTML","dataList","keyList","onChange","isEditable","map","contentEditable","suppressContentEditableWarning","onInput","data-name","itemTable","itemSearchBox","i","rows","cells","match","scrollIntoView","style","backgroundColor","_this3","config","_this$state","_this$result","Fragment","components_Header","type","width","telephone","address","defaultValue","renderDataColumn","title","data-id","dist_index_esm","assign","_ref3","colSpan","placeholder","_ref4","Boolean","hostname","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","rootComponent","_react_firebase_auth_dist_index_esm","_ref","user","providerId","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b13baae.chunk.js","sourcesContent":["import Header from \"./Header\";\n\nexport default Header;\n","import React from \"react\";\nimport \"./Header.css\";\n\nclass Header extends React.Component {\n\trender() {\n\t\tconst { loginFunction, logoutFunction, isSignedIn } = this.props;\n\n\t\treturn (\n\t\t\t<div className=\"header_wrapper\">\n\t\t\t\t<div className=\"title\">SinarJaya</div>\n\t\t\t\t{!isSignedIn && (\n\t\t\t\t\t<button onClick={loginFunction} className=\"login_btn\">\n\t\t\t\t\t\tLogin\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t\t{isSignedIn && (\n\t\t\t\t\t<button onClick={logoutFunction} className=\"logout_btn\">\n\t\t\t\t\t\tLogout\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport \"firebase/database\";\nimport {\n  FirebaseDatabaseProvider,\n  // FirebaseDatabaseNode,\n  FirebaseDatabaseMutation\n} from \"@react-firebase/database\";\n\nimport Header from \"./components/Header\";\n\nconst AGENT = \"agent\";\nconst ITEM = \"item\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isDataReady: false,\n      itemEditIndex: null,\n      agentEditIndex: null,\n      isAlowed: false\n    };\n\n    // store insert data form value\n    this.formValueItem = {};\n    this.formValueAgent = {};\n\n    // store editable content on edit state\n    this.editItemValue = {};\n    this.editAgentValue = {};\n\n    // indexing agent for performance case\n    this.agentIndex = {};\n\n    // local storage for database data\n    this.result = { item: [], agent: [] };\n\n    this.loginFunction = this.loginFunction.bind(this);\n    this.logoutFunction = this.logoutFunction.bind(this);\n    this.formChangeItem = this.formChangeItem.bind(this);\n    this.formChangeAgent = this.formChangeAgent.bind(this);\n    this.pushItem = this.pushItem.bind(this);\n    this.pushAgent = this.pushAgent.bind(this);\n    this.saveEdit = this.saveEdit.bind(this);\n    this.itemContentChange = this.itemContentChange.bind(this);\n    this.agentContentChange = this.agentContentChange.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.findItemOnTable = this.findItemOnTable.bind(this);\n  }\n\n  // fetch on componentDidMount\n  componentDidMount() {\n    const { firebase } = this.props;\n\n    var item = firebase\n      .database()\n      .ref()\n      .child(\"item\")\n      .orderByChild(\"agent\");\n\n    var agent = firebase\n      .database()\n      .ref()\n      .child(\"agent\");\n\n    item\n      .once(\"value\")\n      .then(snapshot => {\n        snapshot.forEach(childSnapshot => {\n          if (childSnapshot.key === \"default\") return;\n          var temp = snapshot.child(childSnapshot.key).val();\n          temp.id = childSnapshot.key;\n          this.result.item.push(temp);\n        });\n      })\n      .catch(error => {});\n\n    agent\n      .once(\"value\")\n      .then(snapshot => {\n        var index = 0;\n        snapshot.forEach(childSnapshot => {\n          if (childSnapshot.key === \"default\") return;\n          var temp = snapshot.child(childSnapshot.key).val();\n          temp.id = childSnapshot.key;\n          this.result.agent.push(temp);\n          this.agentIndex[childSnapshot.key] = index;\n          index++;\n        });\n\n        this.setState({\n          isDataReady: true,\n          isAlowed: true\n        });\n      })\n      .catch(error => {\n        this.setState({\n          isDataReady: true,\n          isAlowed: false\n        });\n      });\n  }\n\n  loginFunction() {\n    const { firebase } = this.props;\n    const googleAuth = new firebase.auth.GoogleAuthProvider();\n    googleAuth.addScope(\"https://www.googleapis.com/auth/plus.login\");\n    firebase\n      .auth()\n      .signInWithPopup(googleAuth)\n      .then(authData => {\n        console.warn(\"Success Login\");\n        window.location.reload();\n      })\n      .catch(error => {\n        console.warn(`Failed Login ${error.message}`);\n      });\n  }\n\n  logoutFunction() {\n    this.props.firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        console.warn(\"Success Logout\");\n        window.location.reload();\n      })\n      .catch(error => {\n        console.warn(`Failed Logout ${error.message}`);\n      });\n  }\n\n  // Listener for save item form value\n  formChangeItem(evt) {\n    this.formValueItem[evt.target.name] = evt.target.value;\n  }\n\n  // Listener for save agent form value\n  formChangeAgent(evt) {\n    this.formValueAgent[evt.target.name] = evt.target.value;\n  }\n\n  // insert Item\n  async pushItem(runMutation) {\n    if (this.formValueItem.agent === undefined) {\n      alert(\"Please fill Agent on Insert Item section\");\n    } else {\n      await runMutation(this.formValueItem);\n      window.location.reload();\n    }\n  }\n\n  // insert Agent\n  async pushAgent(runMutation) {\n    await runMutation(this.formValueAgent);\n    window.location.reload();\n  }\n\n  deleteItem(evt) {\n    this.props.firebase\n      .database()\n      .ref(\"item\")\n      .child(evt.target.dataset.id)\n      .remove();\n\n    window.location.reload();\n  }\n\n  // save data to DB when user edit\n  saveEdit(evt, path) {\n    const { firebase } = this.props;\n\n    //check empty\n    var isEmpty;\n    var data;\n    if (path === \"item\") {\n      isEmpty = Object.keys(this.editItemValue).length !== 0;\n      data = this.editItemValue;\n    } else {\n      isEmpty = Object.keys(this.editAgentValue).length !== 0;\n      data = this.editAgentValue;\n    }\n\n    if (isEmpty) {\n      var database = firebase.database().ref(path);\n\n      database\n        .child(evt.target.dataset.id)\n        .update(data)\n        .then(() => {\n          database.once(\"value\");\n        })\n        .then(snapshot => snapshot.val())\n        .catch(error => {});\n\n      window.location.reload();\n    }\n\n    this.editItemValue = {};\n    this.setState({\n      itemEditIndex: null,\n      agentEditIndex: null\n    });\n  }\n\n  itemContentChange(evt) {\n    if (evt.target.dataset.name === \"agent\") {\n      this.editItemValue[evt.target.dataset.name] = evt.target.value;\n    } else {\n      this.editItemValue[evt.target.dataset.name] = evt.target.innerHTML;\n    }\n  }\n\n  agentContentChange(evt) {\n    this.editAgentValue[evt.target.dataset.name] = evt.target.innerHTML;\n  }\n\n  renderDataColumn(dataList, keyList, onChange, isEditable) {\n    return keyList.map(key => {\n      return (\n        <td\n          key={key + dataList.id}\n          className={isEditable ? \"edit_active\" : null}\n          contentEditable={isEditable}\n          suppressContentEditableWarning={true}\n          onInput={isEditable ? onChange : null}\n          data-name={key}\n        >\n          {dataList[key]}\n        </td>\n      );\n    });\n  }\n\n  findItemOnTable() {\n    const { itemTable, itemSearchBox } = this;\n    const value = itemSearchBox.value;\n\n    for (var i = 1; i < itemTable.rows.length; i++) {\n      var cellData = itemTable.rows.item(i).cells.item(1).innerHTML;\n      if (cellData.match(value)) {\n        itemTable.rows.item(i).scrollIntoView();\n        itemTable.rows.item(i).style.backgroundColor = \"rgba(0,150,0,.1)\";\n      }\n    }\n  }\n\n  render() {\n    const { firebase, config, isSignedIn } = this.props;\n    const { isDataReady, itemEditIndex, agentEditIndex, isAlowed } = this.state;\n    const { item, agent } = this.result;\n    const { agentIndex } = this;\n\n    if (!isDataReady) return <div className=\"loading\">Loading...</div>;\n\n    if (isDataReady && (!isSignedIn || !isAlowed))\n      return (\n        <React.Fragment>\n          <Header\n            loginFunction={this.loginFunction}\n            logoutFunction={this.logoutFunction}\n            isSignedIn={isSignedIn}\n          />\n          <div className=\"not_info\">\n            {!isAlowed && isSignedIn && (\n              <b>\n                You're not the admin and doesn't have permission to access\n                database\n              </b>\n            )}\n            {!isSignedIn && (\n              <React.Fragment>\n                <div>\n                  <b>Please Login First</b>\n                </div>\n                <div>login button located on right top of page</div>\n              </React.Fragment>\n            )}\n          </div>\n        </React.Fragment>\n      );\n\n    return (\n      <React.Fragment>\n        <Header\n          loginFunction={this.loginFunction}\n          logoutFunction={this.logoutFunction}\n          isSignedIn={isSignedIn}\n        />\n        {/* ==================== Item Table ==================== */}\n        <div className=\"item_wrapper\">\n          <div className=\"item_title\">Item Detail</div>\n          <div className=\"item_search_box\">\n            Search Item Name:{\" \"}\n            <input\n              type=\"text\"\n              ref={ref => {\n                this.itemSearchBox = ref;\n              }}\n            />\n            <button onClick={this.findItemOnTable}>Search</button>\n          </div>\n          <div className=\"table_wrapper\">\n            <table\n              width=\"100%\"\n              ref={ref => {\n                this.itemTable = ref;\n              }}\n            >\n              <thead>\n                <tr>\n                  <td>Agent Detail</td>\n                  <td>Item Name</td>\n                  <td>Buy Price</td>\n                  <td>Sell Price</td>\n                  <td>Action</td>\n                </tr>\n              </thead>\n              <tbody>\n                {item.map((item, index) => {\n                  const isEditable = itemEditIndex === index;\n                  return (\n                    <tr key={item.id}>\n                      <td className={isEditable ? \"edit_active\" : null}>\n                        {!isEditable && (\n                          <table width=\"100%\" className=\"agent_detail_table\">\n                            <tbody>\n                              <tr>\n                                <td>Agent Name</td>\n                                <td>{agent[agentIndex[item.agent]].name}</td>\n                              </tr>\n                              <tr>\n                                <td>Agent Phone</td>\n                                <td>\n                                  {agent[agentIndex[item.agent]].telephone}\n                                </td>\n                              </tr>\n                              <tr>\n                                <td>Agent Address</td>\n                                <td>{agent[agentIndex[item.agent]].address}</td>\n                              </tr>\n                            </tbody>\n                          </table>\n                        )}\n                        {isEditable && (\n                          <select\n                            onChange={this.itemContentChange}\n                            data-name=\"agent\"\n                            defaultValue={item.agent}\n                          >\n                            {agent.map(agent => {\n                              return (\n                                <option key={agent.id} value={agent.id}>\n                                  {agent.name}\n                                </option>\n                              );\n                            })}\n                          </select>\n                        )}\n                      </td>\n                      {this.renderDataColumn(\n                        item,\n                        [\"name\", \"price\", \"sellPrice\"],\n                        this.itemContentChange,\n                        isEditable\n                      )}\n                      <td className=\"action_column\">\n                        {!isEditable && itemEditIndex === null && (\n                          <span\n                            className=\"edit_icon\"\n                            title=\"Edit\"\n                            onClick={() => {\n                              this.setState({ itemEditIndex: index });\n                            }}\n                          />\n                        )}\n                        {isEditable && (\n                          <span\n                            data-id={item.id}\n                            className=\"save_icon\"\n                            title=\"Save\"\n                            onClick={evt => this.saveEdit(evt, ITEM)}\n                          />\n                        )}\n                        <span\n                          className=\"delete_icon\"\n                          title=\"Delete\"\n                          data-id={item.id}\n                          onClick={evt => this.deleteItem(evt, ITEM)}\n                        />\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n        {/* ==================== Agent Table ==================== */}\n        <div className=\"agent_wrapper\">\n          <div className=\"agent_title\">Agent Detail</div>\n          <div className=\"table_wrapper\">\n            <table width=\"100%\">\n              <thead>\n                <tr>\n                  <td>Agent Name</td>\n                  <td>Agent Phone</td>\n                  <td>Agent Address</td>\n                  <td>Action</td>\n                </tr>\n              </thead>\n              <tbody>\n                {agent.map((agent, index) => {\n                  const isEditable = agentEditIndex === index;\n                  return (\n                    <tr key={agent.id}>\n                      {this.renderDataColumn(\n                        agent,\n                        [\"name\", \"telephone\", \"address\"],\n                        this.agentContentChange,\n                        isEditable\n                      )}\n                      <td className=\"action_column\">\n                        {!isEditable && agentEditIndex === null && (\n                          <span\n                            className=\"edit_icon\"\n                            title=\"Edit\"\n                            onClick={() => {\n                              this.setState({ agentEditIndex: index });\n                            }}\n                          />\n                        )}\n                        {isEditable && (\n                          <span\n                            data-id={agent.id}\n                            className=\"save_icon\"\n                            title=\"Save\"\n                            onClick={evt => this.saveEdit(evt, AGENT)}\n                          />\n                        )}\n                        <span\n                          className=\"delete_icon\"\n                          title=\"Delete\"\n                          data-id={agent.id}\n                          onClick={evt => this.deleteItem(evt, AGENT)}\n                        />\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n        {/* ==================== Form Input ==================== */}\n        <FirebaseDatabaseProvider firebase={firebase} {...config}>\n          {/* ==================== Insert Item ==================== */}\n          <FirebaseDatabaseMutation type=\"push\" path=\"item\">\n            {({ runMutation }) => {\n              return (\n                <table className=\"form_table\">\n                  <tbody>\n                    <tr>\n                      <td colSpan=\"2\" className=\"item_title\">\n                        Insert Item\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>Agent</td>\n                      <td>\n                        <select onChange={this.formChangeItem} name=\"agent\">\n                          <option defaultValue>- select from list -</option>\n                          {agent.map(agent => {\n                            return (\n                              <option key={agent.id} value={agent.id}>\n                                {agent.name}\n                              </option>\n                            );\n                          })}\n                        </select>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>Item Name</td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          name=\"name\"\n                          placeholder=\"name\"\n                          onChange={this.formChangeItem}\n                        />\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>Buy Price</td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          name=\"price\"\n                          placeholder=\"price\"\n                          onChange={this.formChangeItem}\n                        />\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>Sell Price</td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          name=\"sellPrice\"\n                          placeholder=\"sellPrice\"\n                          onChange={this.formChangeItem}\n                        />\n                      </td>\n                    </tr>\n                    <tr>\n                      <td colSpan=\"2\">\n                        <button onClick={() => this.pushItem(runMutation)}>\n                          Insert Data\n                        </button>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              );\n            }}\n          </FirebaseDatabaseMutation>\n          {/* ==================== Insert Agent ==================== */}\n          <FirebaseDatabaseMutation type=\"push\" path=\"agent\">\n            {({ runMutation }) => {\n              return (\n                <table className=\"form_table\">\n                  <tbody>\n                    <tr>\n                      <td colSpan=\"2\" className=\"agent_title\">\n                        Insert Agent\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>Agent Adress</td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          name=\"address\"\n                          placeholder=\"address\"\n                          onChange={this.formChangeAgent}\n                        />\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>Agent Name</td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          name=\"name\"\n                          placeholder=\"name\"\n                          onChange={this.formChangeAgent}\n                        />\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>Agent Phone</td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          name=\"telephone\"\n                          placeholder=\"telephone\"\n                          onChange={this.formChangeAgent}\n                        />\n                      </td>\n                    </tr>\n                    <tr>\n                      <td colSpan=\"2\">\n                        <button onClick={() => this.pushAgent(runMutation)}>\n                          Insert Data\n                        </button>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              );\n            }}\n          </FirebaseDatabaseMutation>\n        </FirebaseDatabaseProvider>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// sinarjaya\nexport const config = {\n\tapiKey: \"AIzaSyBqHd8T1PZ5vI0_z0QMz2SUjGp0zJgH2xM\",\n\tauthDomain: \"sinarjaya-eeda5.firebaseapp.com\",\n\tdatabaseURL: \"https://sinarjaya-eeda5.firebaseio.com\",\n\tprojectId: \"sinarjaya-eeda5\",\n\tstorageBucket: \"sinarjaya-eeda5.appspot.com\",\n\tmessagingSenderId: \"354759237488\",\n\tappId: \"1:354759237488:web:da0c1bd331a79be6\"\n};\n\n// test\n// export const config = {\n// \tapiKey: \"AIzaSyBCyp1LaRzUmjZ-7jWn8K1NC82pE1xH4cw\",\n// \tauthDomain: \"test-72d6c.firebaseapp.com\",\n// \tdatabaseURL: \"https://test-72d6c.firebaseio.com\",\n// \tprojectId: \"test-72d6c\",\n// \tstorageBucket: \"test-72d6c.appspot.com\",\n// \tmessagingSenderId: \"844848074841\",\n// \tappId: \"1:844848074841:web:f91ab07115b2496a\"\n// };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// firebase lib\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport {\n\tFirebaseAuthProvider,\n\tFirebaseAuthConsumer\n} from \"@react-firebase/auth\";\nimport { config } from \"./config\";\n\nconst rootComponent = (\n\t<FirebaseAuthProvider firebase={firebase} {...config}>\n\t\t<FirebaseAuthConsumer>\n\t\t\t{({ isSignedIn, user, providerId }) => {\n\t\t\t\treturn (\n\t\t\t\t\t<App isSignedIn={isSignedIn} firebase={firebase} config={config} />\n\t\t\t\t);\n\t\t\t}}\n\t\t</FirebaseAuthConsumer>\n\t</FirebaseAuthProvider>\n);\n\nReactDOM.render(rootComponent, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}